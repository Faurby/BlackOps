@inject HttpClient Http

<MessageFeedNewMessagesNotification newMessageCount=@newMessageCount reloadFeed=@ReloadFeed></MessageFeedNewMessagesNotification>
<Virtualize @ref="MessageContainer" Context="message" ItemsProvider="LoadMessages">
    <ItemContent>
        <MessageBox message=message></MessageBox>
    </ItemContent>
    <Placeholder>
        <PlaceholderMessageBox></PlaceholderMessageBox>
    </Placeholder>
</Virtualize>


@code {
    private Virtualize<Message> MessageContainer { get; set; }
    private Dictionary<int, Message> messageCacheNew;
    private DateTime openPageTime;

    private int oldNewMessageCount;
    private int? newMessageCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        messageCacheNew = new Dictionary<int, Message>();

        openPageTime = DateTime.Now;
        //Console.WriteLine("opened at: " + openPageTime);
        StartTimerAsync();
    }

    public async void StartTimerAsync()
    {
        while(true){
            newMessageCount = await Http.GetFromJsonAsync<int>("/api/Messages/virtualized/discovernew/" + openPageTime.ToString("yyyy-MM-dd-HH-mm-ss"));
            await Task.Delay(1000);
            //Console.WriteLine("getting new message count " + newMessageCount);
            StateHasChanged();
        }
    }

    public async void ReloadFeed()
    {
        openPageTime = DateTime.Now;
        oldNewMessageCount = 0;
        newMessageCount = 0;
        messageCacheNew.Clear();
        await MessageContainer.RefreshDataAsync();
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<Message>> LoadMessages(ItemsProviderRequest request)
    {
        // Make sure all requested items exist in cache
        for (int i = request.StartIndex; i < request.StartIndex + request.Count; i++)
        {
            if (!messageCacheNew.ContainsKey(i))
            {
                // If key is not contained in cache, request from database
                var virtualizeResult = await Http.GetFromJsonAsync<VirtualizedResponse<Message>>("api/Messages/virtualized/" +
                request.StartIndex + "&" + request.Count + "&" + openPageTime.ToString("yyyy-MM-dd-HH-mm-ss"));

                // Add retrieved items to cache
                for (int j = 0; j < virtualizeResult.Items.Count; j++)
                {
                    int newKey = request.StartIndex + j;

                    if (!messageCacheNew.ContainsKey(newKey))
                    {
                        messageCacheNew.Add(newKey, virtualizeResult.Items[j]);
                    }
                }
                return new ItemsProviderResult<Message>(virtualizeResult!.Items, virtualizeResult!.Size); ;
            }
        }

        // Once we are sure the messages exists in cache we can return from cache
        List<Message> messagesFromCache =
        messageCacheNew.Keys
        .Where(key => (request.StartIndex <= key && key < request.StartIndex + request.Count))
        .Select(k => messageCacheNew[k]).ToList();

        return new ItemsProviderResult<Message>(messagesFromCache, messageCacheNew.Count + 5); ;
    }
}