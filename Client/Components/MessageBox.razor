@inject NavigationManager NavigationManager
@inject HttpClient Http

@*  Message box is used in Index and MyTimeline, as the "wall" or "feed" of messages from users. 
    It is a reusable template for displaying messages. *@

<div class="messagebox" @onclick="NavigateToUserpage">
    <div class=avatar-slice>
        <img class="avatar" src=@gravLink>
    </div>
    <div class=text-slice>
        <div class="byline">
            <p class="username">@message!.AuthorName</p>
            <p class="timestamp">@message.Timestamp</p>
        </div>
        <p class="text">@message.Text</p>
    </div>
</div>

@code
{
    // Parameter is used when creating the component, you can give it a parameter to use.
    [Parameter]
    public Message? message { get; set; }
    private string? oldAuthorID {get; set; }
    private string? gravLink;

    // On click, navigate to the desired users page
    private void NavigateToUserpage()
    {
        if (message != null)
        {
            var uri = $"{NavigationManager.BaseUri}/user/" + message.AuthorID;
            NavigationManager.NavigateTo(uri);
        }
    }

    // virtualisation reuses the same component for different users, so we need to update the gravatar link
    protected override async Task OnParametersSetAsync()
    {
        if(oldAuthorID != message.AuthorID)
        {
            // First clear current gravlink since it takes some time to update
            gravLink = null;
            if (message != null)
            {
                oldAuthorID = message.AuthorID;
                gravLink = await Gravatar.GenerateGravatarLink(Http,message!.AuthorID,64);
                //Console.WriteLine(message.Timestamp);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        oldAuthorID = message.AuthorID;
        gravLink = await Gravatar.GenerateGravatarLink(Http,message!.AuthorID,64);
    }
}