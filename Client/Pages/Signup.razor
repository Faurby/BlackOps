@page "/signup"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IModalService modal


<div class=signup-container>
    <h1>Create user</h1>

    <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Username">Username</label>
            <InputText id="Username" @bind-Value="user.UserName" class="form-control" autocomplete="off" />
        </div>
        <div class="form-group">
            <label for="Email">E-mail</label>
            <InputText id="Email" @bind-Value="user.Email" class="form-control" />
        </div> 
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText id="Password" type="password" @bind-Value="user.Password" class="form-control" autocomplete="off" />
        </div>
        <div class="form-group">
            <br />
            <button type="submit" class="btn btn-success">Create</button>
            <button type="reset" class="btn btn-secondary">Reset</button>
            @* <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button> *@
        </div>
    </EditForm>
</div>

@code {
    private User user = new() ;
    private async Task HandleValidSubmit()
    {

        if (CheckUserInput())
        {
            return;
        }
        
        // Checking Username availability
        var availabilityResponse = await Http.GetAsync("api/Users/username/" + user.UserName);
        if (availabilityResponse.IsSuccessStatusCode)
        {
            DisplayErrorBox("Username already exists!");
            return;
        }

        // If success, create user in DB and navigate to index page (force reload).

        var response = await Http.PostAsJsonAsync("api/Users", user);

        if (response.IsSuccessStatusCode)
        {

            await UpdateLocalUser();

            var uri = $"{NavigationManager.BaseUri}";


            // true means force reload next site. Updates NavMenu.
            NavigationManager.NavigateTo(uri, true);
        }
    }

    public bool CheckUserInput()
    {
        if (user.Email == null || user.Email.Trim().Length == 0)
        {
            DisplayErrorBox("Please fill out E-mail!");
            return true;
        } else if (user.UserName == null || user.UserName.Trim().Length == 0)
        {
            DisplayErrorBox("Please fill out Username!");
            return true;
        } else if (user.Password == null || user.Password.Trim().Length == 0)
        {
            DisplayErrorBox("Please fill out Password!");
            return true;
        } 
        else
        {
            return false;
        }
    }

    public void DisplayErrorBox(string msg)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ErrorBox.message), msg);
        modal.Show<ErrorBox>("Error", parameters);
    }

private async Task UpdateLocalUser()
    {
        await localStore.SetItemAsync("user", await Http.GetFromJsonAsync<User>("api/Users/username/" + user.UserName));
    }

    @* private void Cancel()
        {
        var uri = $"{NavigationManager.BaseUri}characters";

        NavigationManager.NavigateTo(uri);
        } *@
}